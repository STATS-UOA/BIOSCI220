[["index.html", "Module I BIOSCI220, University of Auckland Preface 0.1 Course Overview: BIOSCI220 0.2 Module 1: Key Topics 0.3 Timetable 0.4 Assessment (Modules I, II, and III)", " Module I BIOSCI220, University of Auckland Charlotte Jones-Todd Semester 1, 2021 Preface Artwork by @allison_horst 0.1 Course Overview: BIOSCI220 Living systems are the most complex things in the Universe. The science of biology is therefore the science of the complex. Other sciences, like physics and chemistry, have simpler study subjects. This may surprise students who think of other sciences as difficult and maths-heavy, and think of biology as science but with less maths. However, biological research has actually been heavily quantitative for 100+ years. Much of the development of the field of statistics was driven by and for biologists and their research problems, which usually have a large amount of natural variability. In recent decades, the computational revolution has spread to every part of biology, and all biological fields now rely heavily on analyses that would be impossible without computers and computer programming: &quot;big data&quot; studies and complex models of biological phenomena. Therefore, in order to understand modern biological research and findings, and to participate in this research (and get jobs!), it is now essential for biology students to acquire skills in working with and visualising data, learning from data using models, and generating data using simulations of models. These might be classic statistical models, simulation models, or inference with process-based models. Most importantly, students need to gain the ability to be careful and critical thinkers about data and how it is acquired, as well as the ability to think critically about the models that we use to try to simplify, and thereby understand, the incredible complexity of biology. 0.2 Module 1: Key Topics Data Exploration and Statistical Inference Data wrangling and visualisation. Introduction to R, importing and plotting data, R packages Experimental design and introduction to linear models Linear models with multiple variables; interpretation; ANOVA Interpretation of p-values; model critique and model comparison Large data, exploratory data analysis, introduction to clustering and dimensionality reduction 0.3 Timetable **Lectures* in 405-460 Monday 9‚Äì10am Labs in 106-014 Monday 2‚Äì5pm Tuesday 10am‚Äì1pm Thursday 10am‚Äì1pm Friday 10am‚Äì1pm 0.4 Assessment (Modules I, II, and III) Lab exercises 60% Total (11 labs in Total; 6 for Module 1, weeks 1--6) Due weekly by 5pm Weekly quizzes 10% Total (11 quizzes in Total; 5 for Module 1, weeks 2--6) Due weekly by 5pm Final Exam 30% Slides here "],["r-and-rstudio.html", "1 R and RStudio 1.1 Learning Objectives 1.2 Introduction to R and RStudio? 1.3 Exploratory Data Analysis (EDA) 1.4 Other resources: optional but recommended", " 1 R and RStudio The purpose of this chapter is to get you started learning a new language! Throughout BIOSCI220 you will be introduced to tools required to critically analyse and interpret biological data, and processing into biological information. Throughout this module you will be expected to use R and RStudio weekly. It is highly recommended that you familiarise yourself with these environments using the computer, on which, you plan to carry out the majority of your work. If this is a lab computer then R and RStudio will already been installed. If you choose to use these then you should still complete the exercises below to familiarise yourself with the software. Another option available is the use of RStudio Cloud; here, everything is run in a web browser (on a remote server) and doesn't require you to download the software onto your personal computer. However, if you plan to use your personal computer then you will need to install both R and RStudio. Follow the directions in [installing-r-and-rstudio] to do this. 1.1 Learning Objectives Define the difference between R and RStudio Express the benefits and issues associated with these software being used in the scientific community. Specifically, summarise the benefits and drawbacks associated with the open-source paradigm, discuss the concept of reproducible research and outline its importance Distinguish between different data types (e.g., integers, characters, logical, numerical) Explain what an R function is; describe what an argument to an R function is Explain what an R package is; distinguish between the functions install.packages() and library() Explain what a working directory is in the context of R Interpret and fix basic R errors. For example ## Error in library(fiddler): there is no package called &#39;fiddler&#39; and ## Warning in file(file, &quot;rt&quot;): cannot open file &#39;paua.csv&#39;: No such file or ## directory ## Error in file(file, &quot;rt&quot;): cannot open the connection Use the appropriate R function to read in a .csv data; carry out basic exploratory data analysis using tidyverse (use the pipe operator, %&gt;% when summarising a data.frame); create simple plots of the data. 1.2 Introduction to R and RStudio? R is the pheromone to RStudio's PDA. R is a language. Specifically a programming language; it's the way you can speak to your computer to ask it to carry out certain computations. RStudio is an integrated development environment (IDE). This means it is basically an interface, albeit a fancy one, that makes it easier to communicate with your computer in the R language. The main benefit is the additional features it has that enable you to more efficiently speak R. Note R and RStudio are two different pieces of software; for this course you are expected to download both. As you'd expect the PDA depends on the pheromones (i.e., RStudio depends on R) so you have to download R to use RStudio! 1.2.1 Why? The selling pitch of this course states that ...biological research has actually been heavily quantitative for 100+ years... and promises that ...it is now essential for biology students to acquire skills in working with and visualising data, learning from data using models.... We're not making it up! If you need convincing that quantitative and programming skills are essential to graduate in all scientific disciplines have a read of the following. The Popularity of Data Science Software Why R? 1.2.1.1 WhyR? It's free It's open source A general-purpose of programming language Written by statisticians (here in Auckland!) It's available for all operating systems (Windows, Linux, and Mac) There is a huge online support network It's extremely flexible; if you can code it you can do it! 15,000+ packages available! ... 1.2.1.2 Why RStudio? &quot;If R were an airplane, RStudio would be the airport...&quot; Introduction to RStudio Awesomeness byJulie Lowndes Speaks nicely to R Tab completion Debugging capabilities There is a huge online support network Offers many other features and tools to make your workflow with R easier It facilitates reproducibility ... 1.2.2 Installing R and RStudio As mentioned above RStudio depends on R so there is an order you should follow when you download these software. Download and install R by following these instructions. Make sure you choose the correct operating system; if you are unsure then please ask either a TA or myself. Download and install RStudio by going here choosing RStudio Desktop Open Source License Free and following instructions. Again if you are unsure then please ask either a TA or myself. Check all is working Open up RStudio from your computer menu, the icon will look something like this (DO NOT use this icon , this is a link to R and will only open a very basic interface) Wait a little and you should see RStudio open up to something similar to the screenshot below Pay close attention to the notes in the screenshot and familiarise yourself with the terms. Finally, in the Console next to the prompt type 1:10 and press enter on your keyboard. Your computer should say something back you (in the Console)! What do you think you were asking it to do? Does the output make sense?1 If you get stuck at any of the steps above then please ask either a TA or myself. It is imperative for the rest of the course that you complete the steps above. 1.2.2.1 Good practice Always start with a clean workspace Go to Tools &gt; Global Options Why? So your ex (code) can't come and mess up your life! Project-oriented workflow. Recommened: .Rproj Organised Set up each Each assignment/university course as a project Self-contained a project is a folder that contains all relevant files All paths can then be relative to that project Reproducible the project should just work on a different computer Got to Project (top right) &gt; New Project &gt; Create Project Project set-up ‚ö†Ô∏èWarning‚ö†Ô∏è Jenny Bryan will set your computer on fire üî• if you start your script like this rm(list = ls()) This + does NOT create a fresh R process + it makes your script vulnerable + ... 1.2.3 Getting started As in step 3. above open up RStudio from your computer menu, the icon will look something like this . Using the diagram above identify the different panes: Console where you directly type command in and communicate with your computer (via the language R). Environment pane Files pane Some terminology Running code: the act of telling R to perform an act by giving it commands in the console. Objects: where values are saved in (see later for creating an object. Script: a text file containing a set of commands and comments. Comments: notes written within a Script to better document/explain what's happening 1.2.4 R Scripts (a .r file) Go File &gt; New File &gt; R Script to open up a new Script A new (fourth) pane should open up in the top left of RStudio, your Console will have shrunk in size to accommodate this extra pane. This file will have a .r extension and is where you can write, edit, and save the R commands you write. It's a dedicated test editor for your R code (very useful if you want to save your code to run at a later date). The main difference between typing your code into a Script vs Console is that you edit it and save it for later! Remember though the Console is the pane where you communicate with your computer so all code you write will have to be Run here. There are two ways of running a line of code you've written in your Script Ensure your cursor is on the line of code you want to run, hold down Ctrl and press Enter. Ensure your cursor is on the line of code you want to run, then use your mouse to click the Run button (it has a green arrow next to it) on the top right of the Script pane. Type 1:10 in your Script and practise running this line of code using both methods above. Not that if you've Run the code successfully then your computer will speak back to you each time via the Console 1.2.5 Writing Comments Comments are notes to yourself (future or present) or to someone else that are, typically, written interspersed in your code. Now, the comments you write will typically be in a language your computer doesn't understand (e.g., English). So that you can write yourself notes in your Script you need to tell your computer using the R language to ignore them. To do this precede any note you write with #, see below. The # is R for ignore anything after this character. Now remember when you want to leave your R Session you'll need to Save your Script to use it again. To do this go File &gt; Save As and name your file what you wish (remember too to choose a relevant folder on your computer!). 1.2.6 Data types Artwork by @allison_horst Here we're covering data types in R (e.g., integers, doubles/numeric, logical, and characters). Integers are whole values like 1, 0, 220. These are classified &quot;integer&quot; or int in R. Numeric values are a larger set of values containing integers but also fractions and decimal values, for example -56.94 and 1.3. These are classified &quot;numeric&quot; or num or dbl in R. Logicals are either TRUE or FALSE. These are classified &quot;logical&quot; or lgl in R. Characters are text such as ‚ÄúCharlotte‚Äù, ‚ÄúBIOSCI220‚Äù, and ‚ÄúStatistics is the greatest subject ever‚Äù. Note that characters are denoted with the quotation marks around them and are classified &quot;character&quot; or chr in R. ## As an example we&#39;re going to as our computer using R what it classified the character string &quot;Charlotte&quot; as class(&quot;Charlotte&quot;) ## [1] &quot;character&quot; 1.2.7 Creating Objects Objects are created values using the symbols &lt;- (an arrow formed out of &lt; and -). Like we, typically, write an equation the left-hand side is the Object we're defining (creating) and the right-hand side is the stuff we're defining it as. For example, below I'm creating the Object my_name and assigning it the character string of my first name my_name &lt;- &quot;Charlotte&quot; So now the Object my_name ‚Äòcontains‚Äô the value &quot;Charlotte&quot;. Another assignment to the same object will overwrite the content. my_name &lt;- &quot;Moragh&quot; To check the content of an Object you can simply as your computer to print it out for you (in R). my_name ## [1] &quot;Moragh&quot; Note: R is case sensitive: it treats my_name and m=My_Name as completely different objects. An object can be assigned a collection of things: my_names &lt;- c(&quot;Charlotte&quot;, &quot;Moragh&quot;, &quot;Jones-Todd&quot;) my_names ## [1] &quot;Charlotte&quot; &quot;Moragh&quot; &quot;Jones-Todd&quot; some_numbers &lt;- c(1,4,5,13,45,90) some_numbers ## [1] 1 4 5 13 45 90 An Object can also be an entire dataset, see Exploratory Data Analysis (EDA) below. 1.2.8 R functions Functions (or command) perform tasks in R. They take in inputs called arguments and return outputs. You can either manually specify a function‚Äôs arguments or use the function‚Äôs default values. For example, the function seq() in R generates a sequence of numbers. If you just run seq() it will return the value 1. That doesn‚Äôt seem very useful! This is because the default arguments are set as seq(from = 1, to = 1). Thus, if you don‚Äôt pass in different values for from and to to change this behaviour, R just assumes all you want is the number 1. You can change the argument values by updating the values after the = sign. If we try out seq(from = 2, to = 5) we get the result 2 3 4 5 that we might expect. 1.2.9 R packages The base installation of R comes with many useful packages as standard. These packages will contain many of the functions you will use on a daily basis. However, as you start using R for more diverse projects (and as your own use of R evolves) you will find that there comes a time when you will need to extend R‚Äôs capabilities. Happily, many thousands of R users have developed useful code and shared this code as installable packages. You can think of a package as a collection of functions, data and help files collated into a well defined standard structure which you can download and install in R. To install a package from CRAN you can use the install.packages() function. For example if you want to install the remotes package enter the following code into the Console window of RStudio (note: you will need a working internet connection to do this) CRAN is like a centralised library with thousands of books in stock. To access the contents of a book (package) you first need to request it for (install it into) your local library (your computer) Your can only access books in your local library. install.packages(&#39;the.package.name&#39;) To access the knowledge in a particular book (use the function is the package) you need to tell your computer via R to go get the book of the shelf. Then you have access to all the functions it contains! library(the.package.name) 1.2.10 R Errors Sometimes rather than doing what you expect it to your computer will return an Error message to you via the Console prefaced with **Error in...* followed by text that will try to explain what went wrong. This, generally, means something has gone wrong, so what do you do? Read it! THE MESSAGES ARE WRITTEN IN AS PLAIN A ENGLISH AS POSSIBLE DO NOT continue running bits of code hoping the issue will go away. IT WILL NOT. Try and work out what it means and fix it: read the documentation! search or ask questions on Stack Overflow or RStudio Community Sometimes your computer will return a warning messages to you prefaced &quot;Warning:&quot;. These can sometimes be ignored as they may not affect us. However, READ THE MESSAGE and decide for yourself. Occasionally, also your computer will write you a friendly message, just keeping you up-to date with what it's doing, again don't ignore these they might be telling you something useful! 1.2.11 Working directories You need to tell your computer where to look! Look at the top of your Console. You will see something like ~/Desktop/ or C://Users/... (it won't be an exact match of course). This is the 'address' of where your computer is looking. Now, run getwd() and see what output you get (it will be the same as written on the top of your Console pane. This is because getwd() stands for get the current workingdirectory (i.e., the current directory you are currently working in) e.g., getwd() ## [1] &quot;/home/charlotte/Git/BIOSCI220/docs&quot; You should ensure that you are aware of which directory you're working in (which folder RStudio is looking in by default) as this is important later on when we come to reading in files and saving our work! 1.2.11.1 Changing address So you're not where you want to be! Click Session &gt; Set Working Directory &gt; Choose Directory &gt; Chose where you want to go Now notice that something has been written in your Console something similar to setwd(&quot;~/Git/BIOSCI220/data&quot;). Now setwd() stands for set your workingdirectory. If you know the address of the directory you want to work in without having to point-and-click you could use this command directly, in this case you've used the point-and-click to do it and RStudio has helpfully written out your choices as an R command. 1.2.12 Getting help [Where to go?] Let's say we want to learn more about the function mean() (we can take a wild guess at what it calculates, but... what if we didn't know for sure. There are two ways we can ask within RStudio ?mean() or help(mean) Try both and see what pops up in your right-hand bottom pane! Failing that Google is (often) your friend 1.3 Exploratory Data Analysis (EDA) To finish off this section and to ensure you're all set to go for the rest of the module we're going to carry out some exploratory data analysis and visualisations on some real-world data :-) For this module we will be using tidyverse. 'tidyverse' is a collection of R packages that all share underlying design philosophy, grammar, and data structures. They are specifically designed to make data wrangling, manipulation, visualisation, and analysis simpler. To install all the packages that belong to the tidyverse run ## request (download) the tidyverse packages from the centralised library install.packages(&quot;tidyverse&quot;) To tell your computer to access the tidyverse functionality in your session run (Note you'll have to do this each time you start up an R session): ## Get the tidyverse packages from our local library library(tidyverse) 1.3.1 Reading in data from a .csv file First off download the paua.csv file from CANVAS (listed under Module 1, Week 1.) onto your computer (remember which folder you saved it in!) To read the data into RStudio In the Environment pane click Import Dataset &gt; ** From Text (readr)** &gt; Browse &gt; Choose your file, remembering which folder you downloaded it to &gt; Another pane should pop up, check the data looks as you might expect &gt; Import You should now notice that in the Environment pane there is something listed under Data (this is the name of the data.frame Object containing the data we will explore) Now notice how in the Console a few lines of code have been added. These are the commands you were telling your computer via the point-and-click procedure you went through! Notice the character string inside read_csv()... This is the full 'address' of your data (the folder you saved it in). When you tell your computer to look for something you need to tell it exactly where it is! Remember the getwd() command above, this tells you the default location RStudio will look for a file, if your file is not in this folder you have to tell it the full address. 1.3.2 Using functions to explore the data Automatically RStudio has run the command View() for you. This makes your dataset show itself in the top left pane. It's like looking at the data in Excel. Follow along with the commands below, I recommend that you open up a new Script and use that to write and save your commands for later. Don't forget to ensure you have read the paua into your session (all commands below assume that your data Object is called paua, if you've called it something different then just replace paua with whatever you've called it below. Now let's go ahead and use some functions to ask and answer questions about our data. The first thing you should always do is view any data frames you import. Let's have a look at your data in the Console paua ## # A tibble: 60 x 3 ## Species Length Age ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Haliotis iris 1.8 1.50 ## 2 Haliotis australis 5.4 11.9 ## 3 Haliotis australis 4.8 5.42 ## 4 Haliotis iris 5.75 4.50 ## 5 Haliotis iris 5.65 5.50 ## 6 Haliotis iris 2.8 2.50 ## 7 Haliotis australis 5.9 6.49 ## 8 Haliotis iris 3.75 5.00 ## 9 Haliotis australis 7.2 8.56 ## 10 Haliotis iris 4.25 5.50 ## # ‚Ä¶ with 50 more rows So, what does this show us? A tibble: 60 x 3: A tibble is a specific kind of data frame in R. Our paua dataset has 60 rows (i.e., 60 different observations). Here, each observation corresponds to a Paua shell. 3 columns corresponding to 3 variables describing each observation. Species, Length, and Age are the different variables of this dataset. We then have a preview of the first 10 rows of observations corresponding to the first 10 Paua shells. ``... with 50 more rows indicates there are 50 more rows to see, but these have not been printed (likely as it would clog our screen) Let's look at some other ways of exploring the data. Using the View() command (recall from above) to explore the data in a pop-up viewer View(paua) Using the glimpse() command for an alternative view glimpse(paua) ## Rows: 60 ## Columns: 3 ## $ Species &lt;chr&gt; &quot;Haliotis iris&quot;, &quot;Haliotis australis&quot;, &quot;Haliotis australis&quot;, ‚Ä¶ ## $ Length &lt;dbl&gt; 1.80, 5.40, 4.80, 5.75, 5.65, 2.80, 5.90, 3.75, 7.20, 4.25, 6‚Ä¶ ## $ Age &lt;dbl&gt; 1.497884, 11.877010, 5.416991, 4.497799, 5.500789, 2.500972, ‚Ä¶ glimpse() will give you the first few entries of each variable in a row after the variable name. Note also, that the data type of the variable is given immediately after each variable‚Äôs name inside &lt; &gt;. 1.3.2.1 The pipe operator %&gt;% A nifty tidyverse tool is called the pipe operator %&gt;%. The pipe operator allows us to combine multiple operations in R into a single sequential chain of actions. Say you would like to perform a hypothetical sequence of operations on a hypothetical data frame x using hypothetical functions f(), g(), and h(): Take x then Use x as an input to a function f() then Use the output of this as an input to a function g() then Use the output of this as an input to a function h() This is where the pipe operator %&gt;% comes in handy. %&gt;% takes the output of one function and then ‚Äúpipes‚Äù it to be the input of the next function. Furthermore, a helpful trick is to read %&gt;% as ‚Äúthen‚Äù or ‚Äúand then.‚Äù For example, you can obtain the same output as the hypothetical sequence of functions as follows: x %&gt;% f() %&gt;% g() %&gt;% h() You would read this sequence as: Take x then Use this output as the input to the next function f() then Use this output as the input to the next function g() then Use this output as the input to the next function h() So to calculate the mean Age of each Species in the paua dataset we would use paua %&gt;% group_by(Species) %&gt;% summarize(mean_age = mean(Age)) ## # A tibble: 2 x 2 ## Species mean_age ## * &lt;chr&gt; &lt;dbl&gt; ## 1 Haliotis australis 7.55 ## 2 Haliotis iris 4.40 You would read the sequence above as: Take the paua data.frame then Use this and apply the group_by() function to group by Species Use this output and apply the summarize() function to calculate the mean Age of each group (Species), calling the resulting number mean_age 1.3.3 Basic plotting (for your own purposes) The payoff is so clear: you make informative plots that help you understand data. boxplot(Age ~ Species, data = paua) So what have we asked our computer to do here? Given what we know about the types of data our paua Object contains what plots do you think would be most appropriate for each variable? Below is some example code; each line of code will produce a plot (perhaps not a sensible one though). What do you think? What is each plot showing us? boxplot(Length ~ Species, data = paua) boxplot(Age ~ Species, data = paua) plot(Age ~ Length, data = paua) boxplot(Age ~ Length, data = paua) plot(paua$Age) 1.4 Other resources: optional but recommended Artwork by @allison_horst R for Data Science RStudio Education An Introduction to R Learning statistics with R: A tutorial for psychology students and other beginners R for Biologists Quantitative Biology: Basic Introduction to R You should have seen the numbers 1 to 10 printed out as a sequence.‚Ü© "],["data-exploration-and-visualization.html", "2 Data exploration and visualization 2.1 Learning objectives 2.2 Data wrangling and manipulation 2.3 Data sovereignty 2.4 Data Viz 2.5 Other resources: optional but recommended", " 2 Data exploration and visualization 2.1 Learning objectives Define data sovereignty and explain this in relation to a researcher's obligation when collecting, displaying, and analysing data Create and communicate informative data visualisations using R Discuss and critique data visualisations Carry out and interpret the outputs of basic exploratory data analysis using in-built R functions 2.2 Data wrangling and manipulation 2.2.1 Introuducing the Palmer penguins Artwork by @allison_horst library(palmerpenguins) ## contains some nice penguin data penguins ## # A tibble: 344 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_‚Ä¶ body_mass_g ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Adelie Torge‚Ä¶ 39.1 18.7 181 3750 ## 2 Adelie Torge‚Ä¶ 39.5 17.4 186 3800 ## 3 Adelie Torge‚Ä¶ 40.3 18 195 3250 ## 4 Adelie Torge‚Ä¶ NA NA NA NA ## 5 Adelie Torge‚Ä¶ 36.7 19.3 193 3450 ## 6 Adelie Torge‚Ä¶ 39.3 20.6 190 3650 ## 7 Adelie Torge‚Ä¶ 38.9 17.8 181 3625 ## 8 Adelie Torge‚Ä¶ 39.2 19.6 195 4675 ## 9 Adelie Torge‚Ä¶ 34.1 18.1 193 3475 ## 10 Adelie Torge‚Ä¶ 42 20.2 190 4250 ## # ‚Ä¶ with 334 more rows, and 2 more variables: sex &lt;fct&gt;, year &lt;int&gt; 2.2.2 Common dataframe manipulations in the tidyverse, using dplyr and tidyr 2.2.2.1 tidy data Illustration from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst Removing NA values library(tidyverse) penguins_nafree &lt;- penguins %&gt;% drop_na() penguins_nafree ## # A tibble: 333 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_‚Ä¶ body_mass_g ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Adelie Torge‚Ä¶ 39.1 18.7 181 3750 ## 2 Adelie Torge‚Ä¶ 39.5 17.4 186 3800 ## 3 Adelie Torge‚Ä¶ 40.3 18 195 3250 ## 4 Adelie Torge‚Ä¶ 36.7 19.3 193 3450 ## 5 Adelie Torge‚Ä¶ 39.3 20.6 190 3650 ## 6 Adelie Torge‚Ä¶ 38.9 17.8 181 3625 ## 7 Adelie Torge‚Ä¶ 39.2 19.6 195 4675 ## 8 Adelie Torge‚Ä¶ 41.1 17.6 182 3200 ## 9 Adelie Torge‚Ä¶ 38.6 21.2 191 3800 ## 10 Adelie Torge‚Ä¶ 34.6 21.1 198 4400 ## # ‚Ä¶ with 323 more rows, and 2 more variables: sex &lt;fct&gt;, year &lt;int&gt; Extract rows that meet logical criteria dplyr::filter(penguins_nafree, island == &quot;Torgersen&quot; ) ## # A tibble: 47 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_‚Ä¶ body_mass_g ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Adelie Torge‚Ä¶ 39.1 18.7 181 3750 ## 2 Adelie Torge‚Ä¶ 39.5 17.4 186 3800 ## 3 Adelie Torge‚Ä¶ 40.3 18 195 3250 ## 4 Adelie Torge‚Ä¶ 36.7 19.3 193 3450 ## 5 Adelie Torge‚Ä¶ 39.3 20.6 190 3650 ## 6 Adelie Torge‚Ä¶ 38.9 17.8 181 3625 ## 7 Adelie Torge‚Ä¶ 39.2 19.6 195 4675 ## 8 Adelie Torge‚Ä¶ 41.1 17.6 182 3200 ## 9 Adelie Torge‚Ä¶ 38.6 21.2 191 3800 ## 10 Adelie Torge‚Ä¶ 34.6 21.1 198 4400 ## # ‚Ä¶ with 37 more rows, and 2 more variables: sex &lt;fct&gt;, year &lt;int&gt; Summarise data into single row of values dplyr::summarise(penguins_nafree, avgerage_bill_length = mean(bill_length_mm)) ## # A tibble: 1 x 1 ## avgerage_bill_length ## &lt;dbl&gt; ## 1 44.0 Group data into rows with the same value of Species dplyr::group_by(penguins_nafree, species) ## # A tibble: 333 x 8 ## # Groups: species [3] ## species island bill_length_mm bill_depth_mm flipper_length_‚Ä¶ body_mass_g ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Adelie Torge‚Ä¶ 39.1 18.7 181 3750 ## 2 Adelie Torge‚Ä¶ 39.5 17.4 186 3800 ## 3 Adelie Torge‚Ä¶ 40.3 18 195 3250 ## 4 Adelie Torge‚Ä¶ 36.7 19.3 193 3450 ## 5 Adelie Torge‚Ä¶ 39.3 20.6 190 3650 ## 6 Adelie Torge‚Ä¶ 38.9 17.8 181 3625 ## 7 Adelie Torge‚Ä¶ 39.2 19.6 195 4675 ## 8 Adelie Torge‚Ä¶ 41.1 17.6 182 3200 ## 9 Adelie Torge‚Ä¶ 38.6 21.2 191 3800 ## 10 Adelie Torge‚Ä¶ 34.6 21.1 198 4400 ## # ‚Ä¶ with 323 more rows, and 2 more variables: sex &lt;fct&gt;, year &lt;int&gt; Compute separate summary row for each group penguins_nafree %&gt;% group_by(species) %&gt;% summarise(avgerage_bill_length = mean(bill_length_mm)) ## # A tibble: 3 x 2 ## species avgerage_bill_length ## * &lt;fct&gt; &lt;dbl&gt; ## 1 Adelie 38.8 ## 2 Chinstrap 48.8 ## 3 Gentoo 47.6 Compute separate summary row for each group penguins_nafree %&gt;% group_by(island,species) %&gt;% summarise(avgerage_bill_length = mean(bill_length_mm)) ## `summarise()` has grouped output by &#39;island&#39;. You can override using the `.groups` argument. ## # A tibble: 5 x 3 ## # Groups: island [3] ## island species avgerage_bill_length ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Biscoe Adelie 39.0 ## 2 Biscoe Gentoo 47.6 ## 3 Dream Adelie 38.5 ## 4 Dream Chinstrap 48.8 ## 5 Torgersen Adelie 39.0 2.3 Data sovereignty ''Data sovereignty is the idea that data are subject to the laws and governance structures within the nation it is collected'' 2.4 Data Viz &quot;...have obligations in that we have a great deal of power over how people ultimately make use of data, both in the patterns they see and the conclusions they draw.&quot; --- Michael Correll, Ethical Dimensions of Visualization Research &quot;Clutter and confusion are not attributes of data - they are shortcomings of design.&quot; --- Edward Tufte 2.4.1 Two types of plots 2.4.1.1 For you 2.4.1.2 For others 2.4.2 ggplot2 ggplot2 is an R package for producing statistical, or data, graphics; it has an underlying grammar based on the Grammar of Graphics Every ggplot2 plot has three key components: data, A set of aesthetic mappings between variables in the data and visual properties, and At least one layer which describes how to render each observation. Layers are usually created with a geom function. 2.4.2.1 Plotting penguins You might find this application useful Scatter plot ggplot(penguins_nafree,aes(x = body_mass_g, y = flipper_length_mm)) + ## data &amp; aesthetics geom_point() ## geom How about improving our plots? Simple scatter plot with a trend line ggplot(penguins_nafree, aes(x = body_mass_g, y = flipper_length_mm)) + geom_point() + geom_smooth(method = &quot;lm&quot;, col = &quot;blue&quot;, se = FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; Using facets to split by sex ggplot(penguins_nafree, aes(x = body_mass_g, y = flipper_length_mm, col = species)) + geom_point(size = 2, alpha = 0.5) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + facet_grid(~ sex) + theme_bw() + labs(title = &quot;Flipper Length and Body Mass, by Sex &amp; Species&quot;, subtitle = paste0(nrow(penguins), &quot; of the Palmer Penguins&quot;), x = &quot;Body Mass (g)&quot;, y = &quot;Flipper Length (mm)&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Boxplot ggplot(penguins_nafree,aes(x = species, y = flipper_length_mm)) + ## data &amp; aesthetics geom_boxplot() ## geom But do we get all we want to from this? What about variation within the species? ggplot(penguins_nafree,aes(x = species, y = flipper_length_mm)) + ## data &amp; aesthetics geom_boxplot() ## geom What about distribution? ggplot(penguins_nafree,aes(x = species, y = flipper_length_mm)) + ## data &amp; aesthetics geom_violin() ## geom 2.4.2.2 What do we think about when we look at plots Between group variation Within group variation 2.5 Other resources: optional but recommended Why data sovereignty matters Indigenous Data Sovereignty and Policy Principles of MƒÅori Data Sovereignty ggplot2 cheatsheet Elegant Graphics for Data Analysis Using ggplot2 to communicate your results Teacups, giraffes, and statistics: free online introductory level R and statistics modules "]]
